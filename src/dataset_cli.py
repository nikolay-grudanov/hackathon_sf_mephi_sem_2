# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14x5Kg23q-0onzyoiyC1hy-nF4b6Ly6PC
"""

import pandas as pd
import argparse

def load_data(file_path):
   """
   Загружает данные из CSV файла.
   
   Args:
       file_path (str): Путь к CSV файлу
       
   Returns:
       pd.DataFrame: DataFrame с загруженными данными
   """
   return pd.read_csv(file_path)


def show_random_row(df):
   """
   Показывает случайную строку из датасета.
   
   Args:
       df (pd.DataFrame): DataFrame с данными
       
   Returns:
       pd.DataFrame: DataFrame с одной случайной строкой
   """
   return df.sample(1)


def search_text(df, query):
   """
   Ищет текст в колонках датасета.
   
   Args:
       df (pd.DataFrame): DataFrame с данными
       query (str): Текст для поиска
       
   Returns:
       pd.DataFrame: DataFrame с строками, содержащими искомый текст
   """
   mask = df.apply(lambda x: x.str.contains(query, case=False, na=False)).any(axis=1)
   return df[mask]


def analyze_sentiment(text):
    """Простой анализ тональности текста"""
    positive_words = ['хороший', 'прекрасный', 'люблю', 'счастлив', 'красивый']
    negative_words = ['плохой', 'ужасный', 'ненавижу', 'грустный', 'разочарован']

    pos_count = sum(word in text.lower() for word in positive_words)
    neg_count = sum(word in text.lower() for word in negative_words)

    if pos_count > neg_count:
        return "Положительный"
    elif neg_count > pos_count:
        return "Отрицательный"
    else:
        return "Нейтральный"

def main():
    parser = argparse.ArgumentParser(description="Анализ датасета с текстовыми данными")
    parser.add_argument('file', help="Путь к CSV файлу с данными")
    parser.add_argument('--random', action='store_true', help="Показать случайную запись")
    parser.add_argument('--search', help="Поиск текста в датасете")
    parser.add_argument('--sentiment', help="Анализ тональности текста")
    parser.add_argument('--stats', action='store_true', help="Показать статистику по датасету")

    args = parser.parse_args()

    try:
        df = load_data(args.file)

        if args.random:
            print("\nСлучайная запись из датасета:")
            print(show_random_row(df))

        if args.search:
            print(f"\nРезультаты поиска по запросу '{args.search}':")
            print(search_text(df, args.search))

        if args.sentiment:
            sentiment = analyze_sentiment(args.sentiment)
            print(f"\nАнализ тональности: {sentiment}")

        if args.stats:
            print("\nСтатистика датасета:")
            print(f"Всего записей: {len(df)}")
            print("\nПервые 5 записей:")
            print(df.head())
            print("\nИнформация о колонках:")
            print(df.info())

    except Exception as e:
        print(f"Ошибка: {e}")

if __name__ == "__main__":
    main()